CLEAR MACRO RG
XOR RG,RG
ENDM

END_PROG MACRO
MOV AX,4C00h
INT 21h
ENDM

OUT_STR MACRO STRING
MOV AH, 9
LEA DX, STRING
INT 21H
ENDM

INP_STR MACRO STRING
LEA DX, STRING
MOV AH, 10
INT 21H
ENDM

;CLEAR_SCR MACRO
;MOV AX, 03
;INT 10H
;ENDM

STEG SEGMENT PARA STACK "STACK"
DB 64 DUP("STACK")
STEG ENDS

DSEG SEGMENT PARA PUBLIC "DATA"
    MENU_1 DB 'Type 1-SUM ELEMENTS OF THE MASS.',13,10,'$'
    MENU_2 DB 'Type 2-SEARCH MAXIMUM AND MINIMUM ELEMENT OF THE MASS.',13,10,'$'
    MENU_3 DB 'Type 3-SEARCH COORDINATES IN TWO-DIMENSIONAL MASS.',13,10,'$'
    MENU_4 DB 'Type 4-SORTING THE MASS.',13,10,'$'
    ;MENU_5 DB 'Type 5-EXIT.',13,10,'$'
HELLO_MESSAGE DB 'Enter your number of the elements [2;10]: ','$'
QUANTITY DW 0
MINIMUM DW 0
MAXIMUM DW 0
TMP DW 0
I DW 0
J DW 0
MASS DW 200 DUP('0')
OVER_STR DB 13,10,'OVERFLOW ',13,10,'$'
COOR_STR DB 13,10,'COORDINATES = ',13,10,'$'
ELEM_STR DB 13,10,'ENTER YOUR NUMBER TO FIND = ',13,10,'$'
NEW_STR DB 13,10 ,' $'
SPC_STR DB ' ','$'
SRT_STR DB 13,10,'SORTING ARRAY = ','$'
SUM_STR DB 13,10,'SUMM = ','$'
MIN_STR DB 13,10,'MIN = ','$'
MAX_STR DB 13,10,'MAX = ','$'
BAD_INPUT DB 13,10,'Incorrect input!','$'
ENTER_1 DB 13,10,'ENTER [', '$'
ENTER_2 DB '] :','$'
ENTER_3 DB '][','$'
ENTER_4 DB '[','$'
ENTER_5 DB '] ','$'
INPUT DB 7,?,7 DUP('$')
IS_NEGATIVE DB 1 DUP('0')
CORR_INP DB 1 DUP('0')
DSEG ENDS

CSEG SEGMENT PARA PUBLIC "CODE"

MAIN PROC FAR
ASSUME SS:STEG, DS: DSEG,CS:CSEG
PUSH DS
PUSH AX
CLEAR AX
MOV AX, DSEG
MOV DS, AX
CALL MENU_P
MAIN ENDP

INIT_MASS PROC NEAR
BEGIN_INIT:
;CLEAR_SCR
OUT_STR NEW_STR
OUT_STR HELLO_MESSAGE
CALL INPUT_NUMBER
CMP AX,2
JL BEGIN_INIT
CMP AX,10
JG BEGIN_INIT
MOV QUANTITY,AX
MOV CX,AX
CLEAR BX
MOV I,1
ENTERING_1:
PUSH CX
PUSH BX
TRY_ENTER:
OUT_STR ENTER_1
MOV AX,I
CALL OUTPUT_NUMBER
OUT_STR ENTER_2
CALL INPUT_NUMBER
CMP CORR_INP,1
JE TRY_ENTER
POP BX
MOV MASS[BX],AX
INC BX
INC BX
INC I
POP CX
LOOP ENTERING_1
RET
INIT_MASS ENDP

INIT_MASS_2 PROC NEAR
BEGIN_INIT_2:
;CLEAR_SCR
OUT_STR HELLO_MESSAGE
CALL INPUT_NUMBER
CMP AX,2
JL BEGIN_INIT_2
CMP AX,10
JG BEGIN_INIT_2
MOV QUANTITY,AX
MOV CX,AX
CLEAR BX
MOV I,1
MOV J,1
ENTERING_1_2:
PUSH CX
MOV CX, QUANTITY
ENTERING_2_2:
PUSH CX
PUSH BX
TRY_ENTER_2:
OUT_STR ENTER_1
MOV AX,I
CALL OUTPUT_NUMBER
OUT_STR ENTER_3
MOV AX,J
CALL OUTPUT_NUMBER
OUT_STR ENTER_2
CALL INPUT_NUMBER
CMP CORR_INP,1
JE TRY_ENTER_2
POP BX
MOV MASS[BX],AX
INC BX
INC BX
INC J
POP CX
LOOP ENTERING_2_2
MOV J,1
INC I
POP CX
LOOP ENTERING_1_2
RET
INIT_MASS_2 ENDP

CHOOSE_1 PROC NEAR
CALL INIT_MASS
MOV CX,QUANTITY
CLEAR BX
CLEAR DX
CLEAR AX
END_CYCLE_2:
PUSH CX
MOV AX,MASS[BX]
ADD DX, AX
JO BAD_END_CH_2
INC BX
INC BX
POP CX
LOOP END_CYCLE_2
PUSH DX
OUT_STR SUM_STR
POP DX
MOV AX,DX
CALL OUTPUT_NUMBER
MOV AH, 08h
INT 21h
JMP END_CH_2
BAD_END_CH_2:
OUT_STR OVER_STR
MOV AH, 08h
INT 21h
END_CH_2:
RET
CHOOSE_1 ENDP

CHOOSE_2 PROC NEAR
CALL INIT_MASS
MOV CX,QUANTITY
CLEAR BX
CLEAR DX
MOV AX,MASS[0]
MOV MINIMUM,AX
MOV MAXIMUM,AX
END_CYCLE_CH_2:
PUSH CX
MOV DX,MASS[BX]
MOV AX,MAXIMUM
CMP AX,DX
JG CH_2_METKA_1
MOV AX,MASS[BX]
MOV MAXIMUM,AX
CH_2_METKA_1:
MOV AX,MINIMUM
CMP AX,DX
JLE CH_2_METKA_2
MOV AX,MASS[BX]
MOV MINIMUM,AX
CH_2_METKA_2:
INC BX
INC BX
POP CX
LOOP END_CYCLE_CH_2
OUT_STR MIN_STR
MOV AX,MINIMUM
CALL OUTPUT_NUMBER
OUT_STR MAX_STR
MOV AX,MAXIMUM
CALL OUTPUT_NUMBER
MOV AH, 08h
INT 21h
RET
CHOOSE_2 ENDP

CHOOSE_3 PROC NEAR
CALL INIT_MASS_2
OUT_STR ELEM_STR
CALL INPUT_NUMBER
MOV DX,AX
PUSH DX
OUT_STR COOR_STR
POP DX
MOV CX,QUANTITY
CLEAR BX
MOV I,1
MOV J,1
ENTERING_1_3:
PUSH CX
MOV CX, QUANTITY
ENTERING_2_3:
PUSH CX
MOV AX,MASS[BX]
CMP AX,DX
JNE NO_OUT
MOV AX,I
PUSH BX
PUSH DX
OUT_STR ENTER_4
MOV AX,I
CALL OUTPUT_NUMBER
OUT_STR ENTER_3
MOV AX,J
CALL OUTPUT_NUMBER
OUT_STR ENTER_5
POP DX
POP BX
NO_OUT:
INC BX
INC BX
INC J
POP CX
LOOP ENTERING_2_3
MOV J,1
INC I
POP CX
LOOP ENTERING_1_3
MOV AH, 08h
INT 21h
RET
CHOOSE_3 ENDP

CHOOSE_4 PROC NEAR
CALL INIT_MASS
MOV CX, QUANTITY
ADD CX, QUANTITY
DEC CX
DEC CX
EXTERN_CYCLE:
PUSH CX
CLEAR BX
CLEAR DX
INTERN_CYCLE:
CMP BX, CX
JGE END_INTERN_CYCLE 
MOV DX,MASS[BX]
PUSH BX
INC BX
INC BX
MOV AX,MASS[BX]
POP BX
CMP DX,AX
JL NO_EXCHANGE
MOV MASS[BX],AX
PUSH BX
INC BX
INC BX
MOV MASS[BX],DX
POP BX
NO_EXCHANGE:
INC BX
INC BX
JMP INTERN_CYCLE
END_INTERN_CYCLE:
POP CX
DEC CX
LOOP EXTERN_CYCLE
OUT_STR SRT_STR
MOV CX,QUANTITY
CLEAR BX
SHOW_MASS:
PUSH CX
MOV AX,MASS[BX]
PUSH BX
CALL OUTPUT_NUMBER
OUT_STR SPC_STR
POP BX
INC BX
INC BX
POP CX
LOOP SHOW_MASS
MOV AH, 08H
INT 21H
RET
CHOOSE_4 ENDP


MENU_P PROC NEAR
BEGIN_P:
;CLEAR_SCR
OUT_STR MENU_1
OUT_STR MENU_2
OUT_STR MENU_3
OUT_STR MENU_4
;OUT_STR MENU_5
CALL INPUT_NUMBER
CMP AX,5
JG BEGIN_P
CMP AX,1
JL BEGIN_P
CMP AX,5
JNE METKA1
END_PROG
METKA1:
CMP AX,4
JNE METKA2
CALL CHOOSE_4
JMP BEGIN_P
METKA2:
CMP AX,3
JNE METKA3
CALL CHOOSE_3
JMP BEGIN_P
METKA3:
CMP AX,2
JNE METKA4
CALL CHOOSE_2
JMP BEGIN_P
METKA4:
CMP AX,1
JNE METKA5
CALL CHOOSE_1
JMP BEGIN_P
METKA5:
JMP BEGIN_P
RET
MENU_P ENDP

INPUT_NUMBER PROC NEAR
INP_STR INPUT
MOV IS_NEGATIVE,0
MOV CORR_INP,1
LEA DI, INPUT+2
MOV AL, [DI]
CMP AL, '-'
JE NEGATIVE            
CMP BYTE PTR [DI],'+'
JE POSITIVE
LABEL1: 
   CLEAR BX    
   MOV BX,10
   CLEAR AX
LABEL2:
   CLEAR CX
   CMP BYTE PTR [DI], 0DH    
   JZ LABEL5
   CMP BYTE PTR [DI], 30H   
   JB BAD_NUMBER
   CMP BYTE PTR [DI], 39H    
   JA BAD_NUMBER
   MOV CL, [DI] 
   SUB CL, 30H               
   MOV CORR_INP,0
   MUL BX                     
   JC BAD_NUMBER             
   ADD AX,CX
   JC BAD_NUMBER
   INC DI
   JMP LABEL2
NEGATIVE:                 
   PUSH AX
   MOV AL, IS_NEGATIVE
   MOV AL, 1
   MOV IS_NEGATIVE, AL
   POP AX
   INC DI
   JMP LABEL1
POSITIVE:
   PUSH AX
   MOV AL, 0
   MOV IS_NEGATIVE, AL
   POP AX
   INC DI
   JMP LABEL1
BAD_NUMBER:          
   MOV AH, 9
   LEA DX, BAD_INPUT
   INT 21H 
   MOV CORR_INP,1
   JMP L6
LABEL5:
   CMP AX, 32768
   JA BAD_NUMBER
   MOV CL, IS_NEGATIVE
   CMP CL, 1
   JZ L7
   CMP AX, 32768
   JE BAD_NUMBER
   L7:
   CMP CL, 1
   JNZ L6
   NEG AX
L6: 
RET
INPUT_NUMBER ENDP

OUTPUT_NUMBER PROC NEAR
CMP AX, 0 
JZ ZERO
MOV CX, AX
NEG AX
JS POS
MOV CX, AX
MOV AH,2         
MOV DL, '-'
INT 21H
MOV AX,CX
POS:
   MOV AX,CX
   CLEAR CX             
   CLEAR BX 
   MOV BX,10             
L1:
   XOR DX,DX
   DIV BX           
   PUSH DX          
   INC CX           
   TEST AX,AX       
   JNZ L1
   MOV AH,2 
L2:
   POP DX       
   ADD DL, 30H      
   INT 21H
   LOOP L2      
   JMP L3
ZERO:
   MOV AH, 2         
   MOV DL, '0'
   INT 21H
L3:
RET
OUTPUT_NUMBER ENDP
CSEG ENDS
END MAIN





